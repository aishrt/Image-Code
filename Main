Image Upload

/app.js

const path = require('path');

// image upload
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
app.use(express.static(path.join(__dirname, 'uploads')));
app.use(express.static(path.join(__dirname, 'assets')));




// multer.js

const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { dirname } = require('path');

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const __dirname = dirname(__filename);
    const dir = path.join(__dirname, '../uploads');
    try {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir);
      }
    } catch (err) {
      console.log(err);
    }
    cb(null, dir);
  },
  filename: (req, file, cb) => {
    const extensions = file.originalname.toString().split('.');
    const extension = extensions[extensions.length - 1];
    const fileName = `${Date.now()}.${extension}`;
    cb(null, fileName);
  },
});

module.exports = multer({ storage });


// routes.js

const upload = require("../middlewares/multer");
router.post("/upload", upload.single("file"), controller.upload);


=========== Frontend ===============================

// Reuseable component

import React, { useState } from "react";

interface FileInputProps {
  onFileChange: (file: File | null, fileDataURL: string) => void;
  defaultImage?: string;
}

const generateRandomId = () =>
  `file-input-${Math.random().toString(36).substr(2, 9)}`;

const FileInput: React.FC<FileInputProps> = ({
  onFileChange,
  defaultImage,
}) => {
  const [file, setFile] = useState<File | null>(null);
  const [fileDataURL, setFileDataURL] = useState<string>("");
  const fileId = generateRandomId();

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0];

    if (selectedFile) {
      const reader = new FileReader();

      reader.onload = function (event) {
        if (event.target && event.target.result) {
          setFileDataURL(event.target.result as string);
          onFileChange(selectedFile, event.target.result as string);
        }
      };

      reader.readAsDataURL(selectedFile);
      setFile(selectedFile);
    } else {
      setFile(null);
      setFileDataURL("");
      onFileChange(null, "");
    }
  };

  return (
    <div className="inputFile">
      <label htmlFor={fileId}>
        {file ? (
          <img src={fileDataURL} alt="Selected" />
        ) : (
          <>
            {defaultImage ? (
              <img src={defaultImage} alt="Selected" />
            ) : (
              <i className="fa-solid fa-upload"></i>
            )}
          </>
        )}
      </label>
      <input id={fileId} type="file" onChange={handleFileChange} />
    </div>
  );
};

export default FileInput;

-------------------- How to use component-------------------------


  const [file, setFile] = useState<any>();

  const handleFileChange = (file: File | null, fileDataURL: string) => {
    setFile(file);
  };

  const onSubmit: SubmitHandler<registerDetails> = async (data) => {
    try {
      const roleValue = checked ? "admin" : "user";
      let uploadedFile = "";

      if (file) {
        const imgResp = await fileUpload(file);
        const imgUrl = imgResp?.toString();
        uploadedFile = imgUrl ? imgUrl : "";
      }
      const response = await registerApi({
        ...data,
        role: roleValue,
        image: uploadedFile,
      });
      const roleType = response.data.data.role === "user" ? "User" : "Admin";
      toast.success(`${roleType} registered successful!`);
      navigate("/login");
    } catch (error: any) {
      toast.error(`${error?.response?.data?.message}`);
    }
  };

<FileInput onFileChange={handleFileChange} />



------------------------- API 


import axios from "axios";
import { API_URL } from "../../config";

export type fileDTO = {
  file: any;
};

export const fileUpload = async (file: File): Promise<fileDTO | undefined> => {
  try {
    const formData = new FormData();
    formData.append("file", file);

    const response = await axios.post(`${API_URL}/upload`, formData);

    if (response.status === 200) {
      const data = response.data.file;
      return data;
    } else {
      console.error("Error uploading image:", response.data);
    }
  } catch (error) {
    console.error("An error occurred while uploading image:", error);
  }
};





============== If no api then use this  in the filr 

// const [file, setFile] = useState<any>();
// const handleFileChange = (file: File | null, fileDataURL: string) => {
//   setFile(file);
// };
// const handleUpload = async () => {
//   try {
//     const formData = new FormData();
//     formData.append("file", file!);
//     const response = await axios.post(`${API_URL}/upload`, formData);
//     if (response.status === 200) {
//       const data = response.data.file;
//       return data;
//     } else {
//       console.error("Error uploading image:", response.data);
//     }
//   } catch (error) {
//     console.error("An error occurred while uploading image:", error);
//   }
// };
